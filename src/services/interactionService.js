import { supabase } from '../lib/supabase.js';

// Servi√ßo para intera√ß√µes medicamentosas baseado em dados reais
const interactionService = {
  // Buscar todas as intera√ß√µes baseadas nos medicamentos do banco
  async getAllInteractions() {
    try {
      console.log('üîç Buscando medicamentos com intera√ß√µes...');
      
      // Primeiro, buscar medicamentos que t√™m informa√ß√µes de intera√ß√µes
      const { data: medications, error: medError } = await supabase
        .from('medications')
        .select('id, name, important_interactions, contraindications, side_effects')
        .not('important_interactions', 'is', null)
        .order('name');

      if (medError) {
        console.error('‚ùå Erro ao buscar medicamentos:', medError);
        throw medError;
      }

      console.log(`‚úÖ Encontrados ${medications?.length || 0} medicamentos com dados de intera√ß√µes`);

      if (!medications || medications.length === 0) {
        console.log('‚ö†Ô∏è Nenhum medicamento com intera√ß√µes encontrado');
        return [];
      }

      // Converter as informa√ß√µes de intera√ß√µes em um formato estruturado
      const interactions = [];
      
      for (let i = 0; i < medications.length; i++) {
        const medA = medications[i];
        
        // Procurar por outros medicamentos que possam interagir
        for (let j = i + 1; j < medications.length; j++) {
          const medB = medications[j];
          
          // Verificar se h√° men√ß√£o de intera√ß√£o entre os medicamentos
          const interactionFound = this.findInteractionBetween(medA, medB);
          
          if (interactionFound) {
            interactions.push({
              id: `${medA.id}_${medB.id}`,
              medication_a: medA.name,
              medication_b: medB.name,
              medication_a_id: medA.id,
              medication_b_id: medB.id,
              severity_level: interactionFound.severity,
              description: interactionFound.description,
              clinical_significance: interactionFound.clinical_significance,
              mechanism: interactionFound.mechanism,
              management: interactionFound.management,
              created_at: new Date().toISOString()
            });
          }
        }
      }

      console.log(`üîó Identificadas ${interactions.length} intera√ß√µes potenciais`);
      return interactions;
      
    } catch (error) {
      console.error('‚ùå Erro geral no getAllInteractions:', error);
      throw error;
    }
  },

  // Buscar intera√ß√µes de medicamentos espec√≠ficos
  async getInteractionsForMedications(medicationNames) {
    try {
      const allInteractions = await this.getAllInteractions();
      
      return allInteractions.filter(interaction => 
        medicationNames.some(name => 
          interaction.medication_a.toLowerCase().includes(name.toLowerCase()) ||
          interaction.medication_b.toLowerCase().includes(name.toLowerCase())
        )
      );
    } catch (error) {
      console.error('Erro ao buscar intera√ß√µes espec√≠ficas:', error);
      throw error;
    }
  },

  // Buscar estat√≠sticas de intera√ß√µes
  async getInteractionStats() {
    try {
      console.log('üìä Calculando estat√≠sticas de intera√ß√µes...');
      const interactions = await this.getAllInteractions();
      
      const stats = {
        total: interactions.length,
        severe: interactions.filter(i => i.severity_level === 'alta' || i.severity_level === 'grave').length,
        moderate: interactions.filter(i => i.severity_level === 'moderada' || i.severity_level === 'm√©dia').length,
        mild: interactions.filter(i => i.severity_level === 'leve' || i.severity_level === 'baixa').length,
        mostCommonMedications: this.getMostCommonMedications(interactions)
      };

      console.log(`üìà Estat√≠sticas calculadas: Total: ${stats.total}, Graves: ${stats.severe}, Moderadas: ${stats.moderate}, Leves: ${stats.mild}`);
      return stats;
    } catch (error) {
      console.error('‚ùå Erro ao calcular estat√≠sticas:', error);
      // Retornar estat√≠sticas vazias em caso de erro
      return {
        total: 0,
        severe: 0,
        moderate: 0,
        mild: 0,
        mostCommonMedications: []
      };
    }
  },

  // Fun√ß√£o auxiliar para encontrar intera√ß√µes entre dois medicamentos
  findInteractionBetween(medA, medB) {
    // Tratar os dados de intera√ß√µes que podem ser arrays ou strings
    let medAInteractions = [];
    let medBInteractions = [];
    
    // Processar intera√ß√µes do medicamento A
    if (Array.isArray(medA.important_interactions)) {
      medAInteractions = medA.important_interactions.map(i => i.toLowerCase());
    } else if (typeof medA.important_interactions === 'string') {
      medAInteractions = [medA.important_interactions.toLowerCase()];
    }
    
    // Processar intera√ß√µes do medicamento B
    if (Array.isArray(medB.important_interactions)) {
      medBInteractions = medB.important_interactions.map(i => i.toLowerCase());
    } else if (typeof medB.important_interactions === 'string') {
      medBInteractions = [medB.important_interactions.toLowerCase()];
    }

    const medAName = medA.name.toLowerCase();
    const medBName = medB.name.toLowerCase();

    // Verificar se h√° intera√ß√µes comuns ou se um medicamento menciona categorias do outro
    const commonInteractions = medAInteractions.filter(intA => 
      medBInteractions.some(intB => 
        intA.includes(intB) || intB.includes(intA) || 
        intA === intB
      )
    );

    // Verificar se um medicamento menciona especificamente o outro
    const directMention = medAInteractions.some(int => int.includes(medBName)) ||
                         medBInteractions.some(int => int.includes(medAName));

    if (commonInteractions.length > 0 || directMention) {
      // Determinar severidade baseada no tipo de intera√ß√£o
      let severity = 'moderada';
      let description = `Poss√≠vel intera√ß√£o entre ${medA.name} e ${medB.name}`;
      let mechanism = 'Intera√ß√£o identificada atrav√©s de categorias farmacol√≥gicas comuns';
      let clinical_significance = 'Monitoramento recomendado';
      let management = 'Consulte um profissional de sa√∫de';

      // An√°lise de severidade baseada nas categorias de intera√ß√£o
      const highRiskCategories = ['anticoagulantes', 'l√≠tio', 'digoxina', 'varfarina'];
      const moderateRiskCategories = ['anti-inflamat√≥rios', 'diur√©ticos', '√°lcool'];
      
      const allInteractions = [...medAInteractions, ...medBInteractions, ...commonInteractions];
      const interactionText = allInteractions.join(' ').toLowerCase();
      
      if (highRiskCategories.some(cat => interactionText.includes(cat))) {
        severity = 'alta';
        clinical_significance = 'Intera√ß√£o clinicamente significativa - monitoramento rigoroso necess√°rio';
        management = 'Monitorar par√¢metros espec√≠ficos e ajustar doses conforme necess√°rio';
        
        if (interactionText.includes('anticoagulantes')) {
          description = `Ambos ${medA.name} e ${medB.name} podem afetar a coagula√ß√£o sangu√≠nea`;
          mechanism = 'Potencializa√ß√£o dos efeitos anticoagulantes';
        } else if (interactionText.includes('l√≠tio')) {
          description = `Poss√≠vel altera√ß√£o dos n√≠veis s√©ricos de l√≠tio com ${medA.name} e ${medB.name}`;
          mechanism = 'Altera√ß√£o da excre√ß√£o renal ou liga√ß√£o proteica';
        }
      } else if (moderateRiskCategories.some(cat => interactionText.includes(cat))) {
        severity = 'moderada';
        clinical_significance = 'Intera√ß√£o requer monitoramento';
        management = 'Monitorar sinais e sintomas, ajustar dose se necess√°rio';
        
        if (interactionText.includes('anti-inflamat√≥rios')) {
          description = `${medA.name} e ${medB.name} s√£o anti-inflamat√≥rios - risco de potencializa√ß√£o de efeitos`;
          mechanism = 'Somat√≥rio de efeitos anti-inflamat√≥rios e poss√≠vel toxicidade gastrointestinal';
        } else if (interactionText.includes('√°lcool')) {
          description = `${medA.name} e ${medB.name} podem ter intera√ß√£o com √°lcool`;
          mechanism = 'Potencializa√ß√£o de efeitos depressores ou hepatot√≥xicos';
        }
      } else {
        severity = 'leve';
        clinical_significance = 'Intera√ß√£o de baixo risco cl√≠nico';
        management = 'Monitoramento b√°sico recomendado';
      }

      // Descri√ß√£o mais espec√≠fica baseada nas intera√ß√µes comuns
      if (commonInteractions.length > 0) {
        description = `${medA.name} e ${medB.name} compartilham intera√ß√µes com: ${commonInteractions.join(', ')}`;
      }

      return {
        severity,
        description,
        mechanism,
        clinical_significance,
        management
      };
    }

    return null;
  },

  // Extrair contexto da intera√ß√£o
  extractContext(text, medicationName) {
    const sentences = text.split(/[.!?]+/);
    const relevantSentence = sentences.find(sentence => 
      sentence.toLowerCase().includes(medicationName.toLowerCase())
    );
    
    return relevantSentence ? relevantSentence.trim() : null;
  },

  // Obter medicamentos mais comuns nas intera√ß√µes
  getMostCommonMedications(interactions) {
    const medicationCount = {};
    
    interactions.forEach(interaction => {
      medicationCount[interaction.medication_a] = (medicationCount[interaction.medication_a] || 0) + 1;
      medicationCount[interaction.medication_b] = (medicationCount[interaction.medication_b] || 0) + 1;
    });

    return Object.entries(medicationCount)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 5)
      .map(([name, count]) => ({ name, count }));
  },

  // Buscar medicamentos com mais intera√ß√µes
  async getMedicationsWithMostInteractions() {
    try {
      const { data: medications, error } = await supabase
        .from('medications')
        .select('name, important_interactions')
        .not('important_interactions', 'is', null)
        .order('name');

      if (error) throw error;

      // Calcular score de intera√ß√µes para cada medicamento
      const medicationScores = medications.map(med => {
        const interactionText = med.important_interactions || '';
        const interactionCount = (interactionText.match(/,/g) || []).length + 1;
        const highRiskScore = (interactionText.match(/grave|severa|perigosa|contraindicado/gi) || []).length * 3;
        const moderateRiskScore = (interactionText.match(/cuidado|aten√ß√£o|monitorar/gi) || []).length * 2;
        
        return {
          name: med.name,
          interactionScore: interactionCount + highRiskScore + moderateRiskScore,
          interactionText: interactionText.substring(0, 100) + '...'
        };
      });

      return medicationScores
        .sort((a, b) => b.interactionScore - a.interactionScore)
        .slice(0, 10);
    } catch (error) {
      console.error('Erro ao buscar medicamentos com mais intera√ß√µes:', error);
      throw error;
    }
  }
};

export default interactionService;
