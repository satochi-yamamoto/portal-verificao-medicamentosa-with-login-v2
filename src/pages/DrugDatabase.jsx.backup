import { useState, useEffect } from 'react'
import { Database, Search, Plus, Edit, Trash2, Clock, TrendingUp } from 'lucide-react'
import medicationCaptureService from '../services/medicationCaptureEnhanced'
import toast from 'react-hot-toast'

const DrugDatabase = () => {
  const [medications, setMedications] = useState([])
  const [filteredMedications, setFilteredMedications] = useState([])
  const [searchTerm, setSearchTerm] = useState('')
  const [isLoading, setIsLoading] = useState(true)
  const [showAddForm, setShowAddForm] = useState(false)
  const [editingMedication, setEditingMedication] = useState(null)
  const [captureStats, setCaptureStats] = useState(null)

  // Carregar medicamentos reais do banco de dados
  const loadMedications = async () => {
    try {
      setIsLoading(true)
      console.log('üîç Carregando medicamentos do banco de dados...')
      
      // Carregar medicamentos detalhados
      const detailedResult = await medicationCaptureService.getDetailedMedications()
      
      // Carregar estat√≠sticas
      const statsResult = await medicationCaptureService.getCaptureStats()
      
      if (detailedResult.success) {
        const medicationsWithFormattedData = detailedResult.medications.map(med => ({
          ...med,
          // Manter compatibilidade com o formato antigo
          contraindications: med.contraindications || [],
          side_effects: med.common_side_effects || [],
          interactions: med.important_interactions || [],
          dosage_form: med.dosage_forms?.[0] || 'N√£o especificado'
        }))
        
        setMedications(medicationsWithFormattedData)
        setFilteredMedications(medicationsWithFormattedData)
        console.log(`‚úÖ ${medicationsWithFormattedData.length} medicamentos carregados`)
        
        if (medicationsWithFormattedData.length === 0) {
          toast.info('Nenhum medicamento capturado ainda. Fa√ßa algumas an√°lises primeiro!')
        }
      } else {
        console.warn('‚ö†Ô∏è Erro ao carregar medicamentos:', detailedResult.message)
        setMedications([])
        setFilteredMedications([])
        toast.error('Erro ao carregar medicamentos do banco')
      }
      
      if (statsResult.success) {
        setCaptureStats(statsResult.stats)
      }
      
    } catch (error) {
      console.error('‚ùå Erro ao carregar medicamentos:', error)
      toast.error('Erro ao conectar com o banco de dados')
      setMedications([])
      setFilteredMedications([])
    } finally {
      setIsLoading(false)
    }
  }

  useEffect(() => {
    loadMedications()
  }, [])

  useEffect(() => {
    if (searchTerm) {
      const filtered = medications.filter(med =>
        med.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        med.active_ingredient.toLowerCase().includes(searchTerm.toLowerCase()) ||
        med.therapeutic_class.toLowerCase().includes(searchTerm.toLowerCase())
      )
      setFilteredMedications(filtered)
    } else {
      setFilteredMedications(medications)
    }
  }, [searchTerm, medications])

  const handleAddMedication = () => {
    setShowAddForm(true)
    setEditingMedication(null)
  }

  const handleEditMedication = (medication) => {
    setEditingMedication(medication)
    setShowAddForm(true)
  }

  const handleDeleteMedication = (id) => {
    if (window.confirm('Tem certeza que deseja excluir este medicamento?')) {
      setMedications(prev => prev.filter(med => med.id !== id))
      toast.success('Medicamento exclu√≠do com sucesso')
    }
  }

  const MedicationForm = ({ medication, onSave, onCancel }) => {
    const [formData, setFormData] = useState({
      name: medication?.name || '',
      active_ingredient: medication?.active_ingredient || '',
      therapeutic_class: medication?.therapeutic_class || '',
      dosage_form: medication?.dosage_form || '',
      contraindications: medication?.contraindications?.join(', ') || '',
      side_effects: medication?.side_effects?.join(', ') || '',
      interactions: medication?.interactions?.join(', ') || ''
    })

    const handleSubmit = (e) => {
      e.preventDefault()
      const newMedication = {
        ...formData,
        id: medication?.id || Date.now(),
        contraindications: formData.contraindications.split(',').map(item => item.trim()),
        side_effects: formData.side_effects.split(',').map(item => item.trim()),
        interactions: formData.interactions.split(',').map(item => item.trim()),
        created_at: medication?.created_at || new Date().toISOString().split('T')[0]
      }
      onSave(newMedication)
    }

    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
        <div className="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto">
          <div className="p-6">
            <h2 className="text-xl font-bold mb-4">
              {medication ? 'Editar Medicamento' : 'Adicionar Medicamento'}
            </h2>
            
            <form onSubmit={handleSubmit} className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="label">Nome do Medicamento</label>
                  <input
                    type="text"
                    className="input"
                    value={formData.name}
                    onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
                    required
                  />
                </div>
                <div>
                  <label className="label">Princ√≠pio Ativo</label>
                  <input
                    type="text"
                    className="input"
                    value={formData.active_ingredient}
                    onChange={(e) => setFormData(prev => ({ ...prev, active_ingredient: e.target.value }))}
                    required
                  />
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="label">Classe Terap√™utica</label>
                  <input
                    type="text"
                    className="input"
                    value={formData.therapeutic_class}
                    onChange={(e) => setFormData(prev => ({ ...prev, therapeutic_class: e.target.value }))}
                    required
                  />
                </div>
                <div>
                  <label className="label">Forma Farmac√™utica</label>
                  <input
                    type="text"
                    className="input"
                    value={formData.dosage_form}
                    onChange={(e) => setFormData(prev => ({ ...prev, dosage_form: e.target.value }))}
                    required
                  />
                </div>
              </div>

              <div>
                <label className="label">Contraindica√ß√µes (separadas por v√≠rgula)</label>
                <textarea
                  className="input min-h-[80px]"
                  value={formData.contraindications}
                  onChange={(e) => setFormData(prev => ({ ...prev, contraindications: e.target.value }))}
                  placeholder="Ex: Hipersensibilidade, Insufici√™ncia hep√°tica..."
                />
              </div>

              <div>
                <label className="label">Efeitos Adversos (separados por v√≠rgula)</label>
                <textarea
                  className="input min-h-[80px]"
                  value={formData.side_effects}
                  onChange={(e) => setFormData(prev => ({ ...prev, side_effects: e.target.value }))}
                  placeholder="Ex: Sonol√™ncia, N√°usea, Cefaleia..."
                />
              </div>

              <div>
                <label className="label">Principais Intera√ß√µes (separadas por v√≠rgula)</label>
                <textarea
                  className="input min-h-[80px]"
                  value={formData.interactions}
                  onChange={(e) => setFormData(prev => ({ ...prev, interactions: e.target.value }))}
                  placeholder="Ex: √Ålcool, Omeprazol, Sinvastatina..."
                />
              </div>

              <div className="flex gap-3 pt-4">
                <button type="submit" className="btn btn-primary flex-1">
                  {medication ? 'Atualizar' : 'Adicionar'} Medicamento
                </button>
                <button type="button" onClick={onCancel} className="btn btn-secondary">
                  Cancelar
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    )
  }

  const handleSaveMedication = (medicationData) => {
    if (editingMedication) {
      setMedications(prev => prev.map(med => 
        med.id === editingMedication.id ? medicationData : med
      ))
      toast.success('Medicamento atualizado com sucesso')
    } else {
      setMedications(prev => [...prev, medicationData])
      toast.success('Medicamento adicionado com sucesso')
    }
    setShowAddForm(false)
    setEditingMedication(null)
  }

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600"></div>
        <span className="ml-2">Carregando medicamentos...</span>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-3">
          <Database className="h-8 w-8 text-primary-600" />
          <div>
            <h1 className="text-2xl font-bold text-gray-900">Base de Medicamentos</h1>
            <p className="text-gray-600">
              Medicamentos capturados automaticamente das consultas
            </p>
          </div>
        </div>
        <div className="flex gap-2">
          <button
            onClick={loadMedications}
            className="btn btn-secondary flex items-center gap-2"
          >
            <TrendingUp className="h-4 w-4" />
            Atualizar
          </button>
          <button
            onClick={handleAddMedication}
            className="btn btn-primary flex items-center gap-2"
          >
            <Plus className="h-4 w-4" />
            Adicionar Manual
          </button>
        </div>
      </div>

      {/* Estat√≠sticas */}
      {captureStats && (
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div className="card text-center">
            <div className="text-2xl font-bold text-blue-600">{captureStats.total_medications}</div>
            <div className="text-sm text-gray-600">Total de Medicamentos</div>
          </div>
          <div className="card text-center">
            <div className="text-2xl font-bold text-green-600">{captureStats.consultation_medications}</div>
            <div className="text-sm text-gray-600">Capturados da IA</div>
          </div>
          <div className="card text-center">
            <div className="text-2xl font-bold text-purple-600">{captureStats.total_consultations}</div>
            <div className="text-sm text-gray-600">Total de Consultas</div>
          </div>
          <div className="card text-center">
            <div className="text-2xl font-bold text-orange-600">{captureStats.ai_enriched_medications}</div>
            <div className="text-sm text-gray-600">Com Dados da IA</div>
          </div>
        </div>
      )}

      {captureStats && captureStats.most_consulted_name !== 'Nenhum' && (
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
          <div className="flex items-center gap-2">
            <TrendingUp className="h-5 w-5 text-blue-600" />
            <span className="font-medium text-blue-900">
              Medicamento mais consultado: {captureStats.most_consulted_name}
            </span>
            <span className="bg-blue-100 text-blue-800 px-2 py-1 rounded text-sm">
              {captureStats.most_consulted_count}x
            </span>
          </div>
        </div>
      )}

      {/* Busca e Estat√≠sticas */}
      <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
        <div className="lg:col-span-3">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
            <input
              type="text"
              className="input pl-10"
              placeholder="Buscar por nome, princ√≠pio ativo ou classe terap√™utica..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
        </div>
        <div className="card text-center">
          <div className="text-2xl font-bold text-primary-600">{medications.length}</div>
          <div className="text-sm text-gray-600">Medicamentos</div>
        </div>
      </div>

      {/* Lista de Medicamentos */}
      <div className="grid grid-cols-1 gap-6">
        {filteredMedications.length === 0 ? (
          <div className="card text-center py-8">
            <Database className="h-12 w-12 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">
              {searchTerm ? 'Nenhum medicamento encontrado' : 'Nenhum medicamento cadastrado'}
            </h3>
            <p className="text-gray-600">
              {searchTerm 
                ? 'Tente ajustar o termo de busca para encontrar medicamentos.'
                : 'Adicione medicamentos √† base de dados para come√ßar.'
              }
            </p>
          </div>
        ) : (
          filteredMedications.map((medication) => (
            <div key={medication.id} className="card">
              <div className="flex items-start justify-between mb-4">
                <div className="flex-1">
                  <div className="flex items-center gap-2 mb-1">
                    <h3 className="text-lg font-semibold text-gray-900">{medication.name}</h3>
                    {medication.source === 'consultation_capture' && (
                      <span className="bg-green-100 text-green-800 px-2 py-1 rounded text-xs flex items-center gap-1">
                        <TrendingUp className="h-3 w-3" />
                        Capturado Auto
                      </span>
                    )}
                    {medication.active_ingredient && (
                      <span className="bg-blue-100 text-blue-800 px-2 py-1 rounded text-xs">
                        IA Enhanced
                      </span>
                    )}
                  </div>
                  <p className="text-sm text-gray-600">{medication.active_ingredient || 'Princ√≠pio ativo n√£o especificado'}</p>
                  <div className="flex items-center gap-2 mt-1">
                    <span className="inline-block px-2 py-1 bg-primary-100 text-primary-800 text-xs rounded">
                      {medication.therapeutic_class || 'Classe n√£o especificada'}
                    </span>
                    {medication.consultation_count > 0 && (
                      <span className="inline-block px-2 py-1 bg-orange-100 text-orange-800 text-xs rounded flex items-center gap-1">
                        <Clock className="h-3 w-3" />
                        {medication.consultation_count}x consultado
                      </span>
                    )}
                  </div>
                </div>
                <div className="flex gap-2">
                  <button
                    onClick={() => handleEditMedication(medication)}
                    className="p-2 text-gray-600 hover:text-primary-600 hover:bg-primary-50 rounded"
                  >
                    <Edit className="h-4 w-4" />
                  </button>
                  <button
                    onClick={() => handleDeleteMedication(medication.id)}
                    className="p-2 text-gray-600 hover:text-danger-600 hover:bg-danger-50 rounded"
                  >
                    <Trash2 className="h-4 w-4" />
                  </button>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 text-sm">
                {/* Informa√ß√µes b√°sicas */}
                <div>
                  <strong className="text-gray-700">Forma Farmac√™utica:</strong>
                  <p className="text-gray-600 mt-1">{medication.dosage_form}</p>
                  {medication.mechanism_of_action && (
                    <>
                      <strong className="text-gray-700 mt-2 block">Mecanismo de A√ß√£o:</strong>
                      <p className="text-gray-600 mt-1 text-xs">{medication.mechanism_of_action}</p>
                    </>
                  )}
                </div>
                
                {/* Contraindica√ß√µes */}
                <div>
                  <strong className="text-gray-700">Contraindica√ß√µes:</strong>
                  <div className="mt-1 space-y-1">
                    {(medication.contraindications || []).slice(0, 3).map((contra, idx) => (
                      <span key={idx} className="inline-block bg-danger-50 text-danger-700 px-2 py-1 rounded text-xs mr-1 mb-1">
                        {contra}
                      </span>
                    ))}
                    {(medication.contraindications || []).length > 3 && (
                      <span className="text-gray-500 text-xs">
                        +{(medication.contraindications || []).length - 3} mais
                      </span>
                    )}
                  </div>
                </div>
                
                {/* Intera√ß√µes */}
                <div>
                  <strong className="text-gray-700">Principais Intera√ß√µes:</strong>
                  <div className="mt-1 space-y-1">
                    {(medication.interactions || []).slice(0, 3).map((interaction, idx) => (
                      <span key={idx} className="inline-block bg-warning-50 text-warning-700 px-2 py-1 rounded text-xs mr-1 mb-1">
                        {interaction}
                      </span>
                    ))}
                    {(medication.interactions || []).length > 3 && (
                      <span className="text-gray-500 text-xs">
                        +{(medication.interactions || []).length - 3} mais
                      </span>
                    )}
                  </div>
                </div>
              </div>

              {/* Informa√ß√µes extras da IA */}
              {(medication.main_indications || medication.monitoring || medication.administration_instructions) && (
                <div className="mt-4 pt-4 border-t border-gray-200">
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                    {medication.main_indications && (
                      <div>
                        <strong className="text-gray-700">Indica√ß√µes:</strong>
                        <div className="mt-1">
                          {medication.main_indications.slice(0, 2).map((indication, idx) => (
                            <span key={idx} className="inline-block bg-green-50 text-green-700 px-2 py-1 rounded text-xs mr-1 mb-1">
                              {indication}
                            </span>
                          ))}
                        </div>
                      </div>
                    )}
                    
                    {medication.monitoring && (
                      <div>
                        <strong className="text-gray-700">Monitoramento:</strong>
                        <div className="mt-1">
                          {medication.monitoring.slice(0, 2).map((monitor, idx) => (
                            <span key={idx} className="inline-block bg-blue-50 text-blue-700 px-2 py-1 rounded text-xs mr-1 mb-1">
                              {monitor}
                            </span>
                          ))}
                        </div>
                      </div>
                    )}
                    
                    {medication.pharmacy_category && (
                      <div>
                        <strong className="text-gray-700">Categoria:</strong>
                        <p className="text-gray-600 mt-1">{medication.pharmacy_category}</p>
                      </div>
                    )}
                  </div>
                  
                  {medication.administration_instructions && (
                    <div className="mt-3">
                      <strong className="text-gray-700">Instru√ß√µes de Administra√ß√£o:</strong>
                      <p className="text-gray-600 mt-1 text-xs">{medication.administration_instructions}</p>
                    </div>
                  )}
                </div>
              )}

              {/* Data de captura */}
              {medication.last_consulted_at && (
                <div className="mt-3 pt-3 border-t border-gray-100 text-xs text-gray-500">
                  √öltima consulta: {new Date(medication.last_consulted_at).toLocaleString('pt-BR')}
            </div>
          ))
        )}
      </div>

      {/* Formul√°rio de Adicionar/Editar */}
      {showAddForm && (
        <MedicationForm
          medication={editingMedication}
          onSave={handleSaveMedication}
          onCancel={() => {
            setShowAddForm(false)
            setEditingMedication(null)
          }}
        />
      )}
    </div>
  )
}

export default DrugDatabase
