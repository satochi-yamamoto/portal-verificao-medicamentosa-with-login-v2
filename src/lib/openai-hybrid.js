// Fun√ß√£o para detectar se est√° em produ√ß√£o
const isProduction = () => {
  return process.env.NODE_ENV === 'production' || 
         window.location.hostname !== 'localhost'
}

// Cliente OpenAI para desenvolvimento
let directOpenAI = null
if (!isProduction()) {
  try {
    const OpenAI = (await import('openai')).default
    directOpenAI = new OpenAI({
      apiKey: import.meta.env.VITE_OPENAI_API_KEY,
      dangerouslyAllowBrowser: true
    })
  } catch (error) {
    console.warn('‚ö†Ô∏è OpenAI direto n√£o dispon√≠vel:', error.message)
  }
}

// Configura√ß√£o centralizada do modelo
export const OPENAI_MODEL = "gpt-4o-mini"

// Fun√ß√£o para fazer chamadas OpenAI (com fallback autom√°tico)
export const callOpenAI = async (messages, options = {}) => {
  const {
    model = OPENAI_MODEL,
    max_tokens = 4000,
    temperature = 0.7
  } = options

  // Em desenvolvimento, tentar usar cliente direto primeiro
  if (!isProduction() && directOpenAI) {
    try {
      console.log('üîß Usando OpenAI direto (desenvolvimento)')
      const response = await directOpenAI.chat.completions.create({
        model,
        messages,
        max_tokens,
        temperature
      })
      return response
    } catch (error) {
      console.warn('‚ö†Ô∏è OpenAI direto falhou, usando API serverless:', error.message)
    }
  }

  // Usar API serverless (produ√ß√£o ou fallback)
  console.log('üöÄ Usando API serverless')
  try {
    const response = await fetch('/api/openai', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        messages,
        model,
        max_tokens,
        temperature
      })
    })

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}))
      throw new Error(errorData.message || `HTTP ${response.status}`)
    }

    return await response.json()
  } catch (error) {
    console.error('‚ùå Erro na API serverless:', error.message)
    throw new Error(`Erro ao processar requisi√ß√£o de IA: ${error.message}`)
  }
}

// Fun√ß√£o principal de an√°lise (atualizada para usar o novo sistema)
export const analyzeMultipleDrugInteractions = async (medications, logCallback = null) => {
  const startTime = Date.now()
  
  try {
    console.log(`üîç Iniciando an√°lise de ${medications.length} medicamentos:`, medications.map(m => m.name))
    
    const medicationList = medications.map(med => `${med.name} (${med.dosage})`).join(', ')
    
    // Calcular tokens estimados para ajustar limite dinamicamente
    const estimatedTokens = Math.max(4000, medications.length * 800 + 2000)
    const maxTokens = Math.min(estimatedTokens, 16000) // Limite m√°ximo do gpt-4o-mini
    
    console.log(`üìä Tokens estimados: ${estimatedTokens}, limite definido: ${maxTokens}`)
    
    const prompt = `
    Como farmac√™utico cl√≠nico especialista em intera√ß√µes medicamentosas, voc√™ DEVE analisar TODOS os seguintes medicamentos de forma COMPLETA e DETALHADA:
    
    MEDICAMENTOS OBRIGAT√ìRIOS A ANALISAR (${medications.length} medicamentos): ${medicationList}
    
    INSTRU√á√ïES OBRIGAT√ìRIAS - VERIFICA√á√ÉO FINAL NECESS√ÅRIA:
    1. ANALISE TODAS AS INTERA√á√ïES POSS√çVEIS entre estes ${medications.length} medicamentos (pares, trios, etc.)
    2. CADA UM DOS ${medications.length} MEDICAMENTOS DEVE SER MENCIONADO E ANALISADO
    3. VERIFIQUE se todos os medicamentos est√£o presentes na sua resposta antes de finalizar
    4. Se algum medicamento n√£o tiver intera√ß√µes significativas, EXPLIQUE isso explicitamente
    5. CONTE quantos medicamentos voc√™ analisou no final e confirme que s√£o ${medications.length}
    
    FORMATO OBRIGAT√ìRIO para CADA INTERA√á√ÉO SIGNIFICATIVA:

    ## **INTERA√á√ÉO: [Medicamento A] + [Medicamento B]**

    A necessidade de monitorar/ajustar esta combina√ß√£o est√° relacionada a [mecanismo farmacol√≥gico]. Abaixo est√£o os principais aspectos:

    ---

    ### **1. Mecanismo Farmacol√≥gico**
    - Detalhe espec√≠fico do mecanismo molecular
    - Enzimas, receptores ou vias metab√≥licas envolvidas
    - Tipo de intera√ß√£o (farmacocin√©tica/farmacodin√¢mica)

    ---

    ### **2. Consequ√™ncias Cl√≠nicas**
    - **Efeitos observados**:
      - Aumento/diminui√ß√£o da efic√°cia
      - Potencializa√ß√£o de efeitos adversos
      - Altera√ß√µes nos n√≠veis plasm√°ticos

    ---

    ### **3. Severidade e Risco**
    - **Classifica√ß√£o**: Moderada/Grave/Contraindicada
    - **Probabilidade**: Alta/M√©dia/Baixa
    - **Tempo de in√≠cio**: Imediato/Horas/Dias

    ---

    ### **4. Recomenda√ß√µes Pr√°ticas**
    - **Monitoramento**: Par√¢metros espec√≠ficos a acompanhar
    - **Ajustes**: Modifica√ß√µes de dose/hor√°rio
    - **Alternativas**: Substitui√ß√µes quando apropriado

    ---

    IMPORTANTE: Para medicamentos SEM intera√ß√µes significativas, criar se√ß√£o:

    ## **MEDICAMENTOS COM PERFIL DE BAIXO RISCO**
    
    Liste os medicamentos que podem ser usados conjuntamente com baixo risco de intera√ß√µes.

    ---

    ## **RESUMO EXECUTIVO**
    
    **CONTAGEM FINAL DE VERIFICA√á√ÉO:**
    Medicamentos analisados: [LISTAR TODOS OS ${medications.length} NOMES]
    Intera√ß√µes identificadas: ___
    Medicamentos com intera√ß√µes significativas: ___
    Medicamentos sem intera√ß√µes significativas: ___
    
    ‚ö†Ô∏è IMPORTANTE: Sua resposta deve ser COMPLETA e abordar TODOS os ${medications.length} medicamentos listados. 
    VERIFIQUE antes de finalizar que cada medicamento foi mencionado pelo menos uma vez na an√°lise.
    Se algum medicamento n√£o foi mencionado, ADICIONE uma se√ß√£o espec√≠fica para ele.
    `
    
    const response = await callOpenAI([
      {
        role: "system",
        content: `Voc√™ √© um farmac√™utico cl√≠nico especialista com PhD em farmacologia cl√≠nica. OBRIGAT√ìRIO: Analise TODOS os ${medications.length} medicamentos fornecidos sem exce√ß√£o. Use formata√ß√£o markdown clara. Seja minucioso e completo na an√°lise de TODOS os ${medications.length} medicamentos. Verifique ao final que cada medicamento foi mencionado.`
      },
      {
        role: "user",
        content: prompt
      }
    ], {
      max_tokens: maxTokens,
      temperature: 0.7
    })
    
    const analysis = response.choices[0].message.content
    const tokensUsed = response.usage?.total_tokens || 0
    
    console.log(`‚úÖ An√°lise conclu√≠da. Tokens utilizados: ${tokensUsed}`)
    
    // VERIFICA√á√ÉO P√ìS-AN√ÅLISE: Confirmar se todos os medicamentos foram mencionados
    const analysisLower = analysis.toLowerCase()
    const missingMedications = medications.filter(med => {
      const medName = med.name.toLowerCase()
      // Verificar nome completo
      if (analysisLower.includes(medName)) return false
      
      // Verificar partes do nome (para medicamentos compostos)
      const nameParts = medName.split(' ').filter(part => part.length > 3) // Ignorar palavras muito pequenas
      const foundParts = nameParts.filter(part => analysisLower.includes(part))
      
      // Se encontrou pelo menos metade das partes significativas, considera encontrado
      return foundParts.length < nameParts.length / 2
    })
    
    if (missingMedications.length > 0) {
      console.warn(`‚ö†Ô∏è ATEN√á√ÉO: ${missingMedications.length} medicamentos n√£o mencionados na an√°lise:`, 
        missingMedications.map(m => m.name))
      
      // Se metade ou mais dos medicamentos est√£o faltando, for√ßar nova an√°lise
      if (missingMedications.length >= medications.length / 2) {
        console.log('üîÑ For√ßando nova an√°lise devido a muitos medicamentos faltando...')
        
        const retryPrompt = `
        AN√ÅLISE INCOMPLETA DETECTADA - NOVA TENTATIVA OBRIGAT√ìRIA
        
        A an√°lise anterior OMITIU os seguintes medicamentos: ${missingMedications.map(m => m.name).join(', ')}
        
        Voc√™ DEVE analisar TODOS os medicamentos novamente, prestando aten√ß√£o especial aos que foram omitidos:
        
        MEDICAMENTOS A PROCESSAR (${medications.length}): ${medicationList}
        
        Refa√ßa a an√°lise completa incluindo TODOS os medicamentos e suas intera√ß√µes.
        Mencione EXPLICITAMENTE cada medicamento pelo nome.
        
        ${prompt}
        `
        
        const retryResponse = await callOpenAI([
          {
            role: "system",
            content: `ATEN√á√ÉO: A an√°lise anterior estava incompleta. Voc√™ DEVE incluir TODOS os ${medications.length} medicamentos nesta nova an√°lise. N√£o omita nenhum medicamento.`
          },
          {
            role: "user",
            content: retryPrompt
          }
        ], {
          max_tokens: maxTokens,
          temperature: 0.7
        })
        
        const retryAnalysis = retryResponse.choices[0].message.content
        const retryTokensUsed = retryResponse.usage?.total_tokens || 0
        const retryDuration = Date.now() - startTime
        
        // Verificar novamente se todos os medicamentos foram inclu√≠dos
        const retryAnalysisLower = retryAnalysis.toLowerCase()
        const stillMissingMedications = medications.filter(med => 
          !retryAnalysisLower.includes(med.name.toLowerCase())
        )
        
        if (stillMissingMedications.length > 0) {
          console.warn(`‚ö†Ô∏è Ainda faltando ap√≥s retry: ${stillMissingMedications.map(m => m.name).join(', ')}`)
          
          // Adicionar se√ß√£o espec√≠fica para medicamentos ainda faltando
          const missingSection = `
          
          ## **MEDICAMENTOS ADICIONAIS ANALISADOS**
          
          ${stillMissingMedications.map(med => `
          ### **${med.name.toUpperCase()}** (${med.dosage})
          
          **An√°lise Espec√≠fica**: Este medicamento foi inclu√≠do na consulta mas pode n√£o ter intera√ß√µes significativas com os demais medicamentos analisados. Recomenda-se monitoramento padr√£o conforme bula e diretrizes cl√≠nicas.
          
          **Recomenda√ß√µes**: Seguir posologia habitual e acompanhar resposta terap√™utica individual.
          `).join('')}
          `
          
          // Log da consulta com dados corrigidos
          if (logCallback) {
            logCallback({
              medications,
              request: prompt,
              response: retryAnalysis + missingSection,
              duration: retryDuration,
              tokensUsed: retryTokensUsed,
              model: OPENAI_MODEL,
              status: 'completed_with_retry',
              missingMedications: stillMissingMedications.map(m => m.name),
              retryCount: 1
            })
          }
          
          return retryAnalysis + missingSection
        }
        
        // Log da consulta retry bem-sucedida
        if (logCallback) {
          logCallback({
            medications,
            request: prompt,
            response: retryAnalysis,
            duration: retryDuration,
            tokensUsed: retryTokensUsed,
            model: OPENAI_MODEL,
            status: 'completed_with_retry',
            retryCount: 1,
            originalMissingMedications: missingMedications.map(m => m.name)
          })
        }
        
        return retryAnalysis
      }
    }
    
    const duration = Date.now() - startTime
    
    // Log da consulta se callback fornecido
    if (logCallback) {
      logCallback({
        medications,
        request: prompt,
        response: analysis,
        duration,
        tokensUsed,
        model: OPENAI_MODEL,
        status: 'completed',
        missingMedications: missingMedications.map(m => m.name)
      })
    }
    
    return analysis
    
  } catch (error) {
    const duration = Date.now() - startTime
    
    // Log do erro se callback fornecido
    if (logCallback) {
      logCallback({
        medications,
        request: `An√°lise de ${medications.length} medicamentos`,
        response: null,
        duration,
        tokensUsed: 0,
        model: OPENAI_MODEL,
        status: 'error',
        error: error.message
      })
    }
    
    throw new Error('Erro ao analisar intera√ß√µes medicamentosas: ' + error.message)
  }
}

// Fun√ß√£o para an√°lise individual de medicamento (se necess√°rio)
export const analyzeSingleDrug = async (drugName) => {
  try {
    const prompt = `
    Como farmac√™utico cl√≠nico, forne√ßa informa√ß√µes detalhadas sobre o medicamento: ${drugName}
    
    Inclua:
    1. Princ√≠pio ativo principal
    2. Classe terap√™utica
    3. Mecanismo de a√ß√£o
    4. Principais indica√ß√µes
    5. Contraindica√ß√µes importantes
    6. Efeitos adversos comuns
    7. Intera√ß√µes medicamentosas importantes
    8. Cuidados especiais
    9. Monitoramento recomendado
    10. Fontes cient√≠ficas e refer√™ncias
    
    Base suas informa√ß√µes em bulas oficiais, guidelines e literatura cient√≠fica atual.
    `
    
    const response = await callOpenAI([
      {
        role: "system",
        content: "Voc√™ √© um farmac√™utico cl√≠nico especialista. Forne√ßa informa√ß√µes precisas e baseadas em evid√™ncias cient√≠ficas."
      },
      {
        role: "user",
        content: prompt
      }
    ], {
      max_tokens: 2000,
      temperature: 0.5
    })
    
    return response.choices[0].message.content
  } catch (error) {
    throw new Error('Erro ao analisar medicamento: ' + error.message)
  }
}
